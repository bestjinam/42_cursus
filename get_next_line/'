/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jinam <jinam@student.42seoul.kr>           +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/07/23 20:29:54 by jinam             #+#    #+#             */
/*   Updated: 2022/07/25 07:18:12 by jinam            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "get_next_line.h"
#include <fcntl.h>
#include <stddef.h>
#include <stdio.h>
#include <sys/fcntl.h>

t_node	*_gnl_init(int fd)
{
	t_node	*new;

	new = malloc(sizeof(t_node));
	if (!new)
		return ((void *) 0);
	new->fd = fd;
	return (new);
}

size_t	_gnl_strchr(const char *s, int c)
{
	unsigned char	*tmp_s;
	size_t			i;

	tmp_s = (unsigned char *)s;
	i = 0;
	while (tmp_s[i])
	{
		if (tmp_s[i] == (unsigned char) c)
			return (i);
		i ++;
	}
	return (0);
}

char *_gnl_strjoin(char const *s1, char const *s2, size_t len)
{
	char	*res;
	size_t	res_len;
	size_t	i;

	res_len = 0;
	while (s1[res_len])
		res_len ++;
	res_len += len + 1;
	res = malloc(sizeof(char) * res_len);
	if (!res)
		return (0);
	i = 0;
	while (i < res_len - 1)
		res[i ++] = *(s1 ++);

}

int	_gnl_make_line(t_node *node, char *line)
{
	if (!line)
	{
		 node->buff_len = read(node->fd, node->buff, BUFFER_SIZE);
		 node->offset = _gnl_strchr(line, '\n');
	}
	while (1)
	{
		if (node->buff_len != BUFFER_SIZE || !node->offset)
			break;
		_gnl_strjoin(line, node->buff, BUFFER_SIZE);
		node->buff_len = read(node->fd, node->buff, BUFFER_SIZE);
		node->offset = _gnl_strchr(line, '\n');
	}
	if (node->buff_len != BUFFER_SIZE)
	{
		_gnl_strjoin(line, node->buff, node->buff_len);
		return (-1);
	}
	else if(node->offset)
	{
		_gnl_strjoin(line, node->buff, node->offset);
		return (0);
	}
	return (1);
}

char	*get_next_line(int fd)
{
	static t_node	*fd_node;
	char			*line;
	int				res;

	if (!fd)
		return (0);
	line = 0;
	if (!fd_node)
		fd_node = _gnl_init(fd);
	res = _gnl_make_line(fd_node, line);
	if (res == -1)
		free(fd_node);
	return (line);
}

int	main(void)
{
	int	fd;
	char *str;

	fd = open("test.txt", O_RDONLY);
	str = get_next_line(fd);
}
